import aiogram
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, ContentType, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from googletrans import Translator
import requests




but_langs = InlineKeyboardButton(text="üåê", callback_data="langs")
markup = InlineKeyboardMarkup(inline_keyboard=[[but_langs]])

but_sub = InlineKeyboardButton(text='–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', url='t.me/Translator_School_Bot')
but_subber = InlineKeyboardButton(text='–ü–æ–¥–ø–∏—Å–∞–ª—Å—è', callback_data='sub')
markup_sub = InlineKeyboardMarkup(inline_keyboard=[[but_sub],
                                                   [but_subber]])

BOT_TOKEN = '6460195162:AAG6P9ikpKTs_JFZ_C9LIs8W6mnig6krJZ8'

bot = Bot(BOT_TOKEN)
dp = Dispatcher()

users = {}

langs = {
    "en": "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π",
    "ru": "–†—É—Å—Å–∫–∏–π",
    "de": "–ù–µ–º–µ—Ü–∫–∏–π",
    "ko": "–ö–æ—Ä–µ–π—Å–∫–∏–π",
    "uz": "–£–∑–±–µ–∫—Å–∫–∏–π",
    "uk": "–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π",
    "kk": "–ö–∞–∑–∞—Ö—Å–∫–∏–π",
    "tg": "–¢–∞–¥–∂–∏—Ç—Å–∫–∏–π",
    "tr": "–¢—É—Ä–µ—Ü–∫–∏–π",
    "es": "–ò—Å–ø–∞–Ω—Å–∫–∏–π",
    "fr": "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π",
    "ja": "–Ø–ø–æ–Ω—Å–∫–∏–π",
    "ar": "–ê—Ä–∞–±—Å–∫–∏–π",
    "zh-CN": "–ö–∏—Ç–∞–π—Å–∫–∏–π",
    "pl": "–ü–æ–ª—å—Å–∫–∏–π",
    "ky": "–ö–∏—Ä–≥–∏–∑—Å–∫–∏–π",
    "az": "–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω—Å–∫–∏–π",
    "el": "–ì—Ä–µ—á–µ—Å–∫–∏–π",
    "pt": "–ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π",
    "fa": "–ü–µ—Ä—Å–∏–¥—Å–∫–∏–π",
    "it": "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π",

    }

# –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@dp.message(CommandStart())
async def command_start(message: Message):
    CHAT_ID = message.chat.id

    id_channel = "-1001932021320"

    is_admin = await admin_or_creator(CHAT_ID, id_channel)

    if is_admin:
        users[message.from_user.id] = {'text': ''}
        await message.answer("–û—Ç–ø—Ä–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–µ–∫—Å—Ç, –∏ –±–æ—Ç –≤ —Ç—É –∂–µ —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–≤–µ–¥—ë—Ç –µ–≥–æ –Ω–∞ –ª—é–±–æ–π —è–∑—ã–∫.\n\n–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ª—é–±–æ–π –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä—É—Å—Å–∫–∏–π, –∞ —Ä—É—Å—Å–∫–∏–π - –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å —è–∑—ã–∫, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üåê¬ª")
    else:
        if message.from_user.id not in users:
            users[message.from_user.id] = {'text': '',
                                        'attemps': 10}

            await message.answer("–û—Ç–ø—Ä–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–µ–∫—Å—Ç, –∏ –±–æ—Ç –≤ —Ç—É –∂–µ —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–≤–µ–¥—ë—Ç –µ–≥–æ –Ω–∞ –ª—é–±–æ–π —è–∑—ã–∫.\n\n–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ª—é–±–æ–π –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä—É—Å—Å–∫–∏–π, –∞ —Ä—É—Å—Å–∫–∏–π - –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å —è–∑—ã–∫, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üåê¬ª")
        else:
            if users[message.from_user.id]['attemps'] == 0:

                is_sub = await check_subscription(CHAT_ID, id_channel)
                if is_sub:
                    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–µ–∫—Å—Ç, –∏ –±–æ—Ç –≤ —Ç—É –∂–µ —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–≤–µ–¥—ë—Ç –µ–≥–æ –Ω–∞ –ª—é–±–æ–π —è–∑—ã–∫.\n\n–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ª—é–±–æ–π –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä—É—Å—Å–∫–∏–π, –∞ —Ä—É—Å—Å–∫–∏–π - –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å —è–∑—ã–∫, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üåê¬ª")
                else:
                    await message.answer(text="–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É", reply_markup=markup_sub)
            else:
                await message.answer("–û—Ç–ø—Ä–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–µ–∫—Å—Ç, –∏ –±–æ—Ç –≤ —Ç—É –∂–µ —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–≤–µ–¥—ë—Ç –µ–≥–æ –Ω–∞ –ª—é–±–æ–π —è–∑—ã–∫.\n\n–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ª—é–±–æ–π –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä—É—Å—Å–∫–∏–π, –∞ —Ä—É—Å—Å–∫–∏–π - –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å —è–∑—ã–∫, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üåê¬ª")

# –≤—ã–≤–æ–¥ –ø–µ—Ä–µ–≤–æ–¥–∞
@dp.message(F.text)
async def go_translate(message: Message):
    CHAT_ID = message.chat.id

    id_channel = "-1001932021320"


    is_admin = await admin_or_creator(CHAT_ID, id_channel)

    if is_admin:
        if message.from_user.id not in users:
                users[message.from_user.id] = {'text': message.text}
        else:
            users[message.from_user.id]['text'] = message.text

        txt = users[message.from_user.id]['text']
        src_approved = detected_text(txt)

        if src_approved == "ru":
            await message.answer(text=translate_text(text=txt, src=src_approved, dest='en'), reply_markup=markup)
        else:
            await message.answer(text=translate_text(text=txt, src=src_approved, dest='ru'), reply_markup=markup)

    else:
        is_sub = await check_subscription(CHAT_ID, id_channel)

        if is_sub:
            if message.from_user.id not in users:
                users[message.from_user.id] = {'text': message.text}
            else:
                users[message.from_user.id]['text'] = message.text

            txt = users[message.from_user.id]['text']
            src_approved = detected_text(txt)

            if src_approved == "ru":
                await message.answer(text=translate_text(text=txt, src=src_approved, dest='en'), reply_markup=markup)
            else:
                await message.answer(text=translate_text(text=txt, src=src_approved, dest='ru'), reply_markup=markup)

        else:
            if message.from_user.id not in users:
                users[message.from_user.id] = {'text': message.text,
                                            'attemps': 10}
            else:
                if users[message.from_user.id]['attemps'] == 0:
                    await message.answer(text="–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É", reply_markup=markup_sub)

                else:
                    attemps = users[message.from_user.id]['attemps'] - 1
                    users[message.from_user.id] = {'text': message.text,
                                                'attemps': attemps}

                    txt = users[message.from_user.id]['text']
                    src_approved = detected_text(txt)

                    if src_approved == "ru":
                        await message.answer(text=translate_text(text=txt, src=src_approved, dest='en'), reply_markup=markup)
                    else:
                        await message.answer(text=translate_text(text=txt, src=src_approved, dest='ru'), reply_markup=markup)

# –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç
def translate_text(text, src, dest):
    try:
        translator = Translator()
        translation = translator.translate(text=text, src=src, dest=dest)
        return translation.text

    except Exception as ex:
        print(ex)

# –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
def detected_text(text):

    translator = Translator()
    detected_lang = translator.detect(text).lang
    return detected_lang

# –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def buitd_keydoard():

    builder = InlineKeyboardBuilder()
    buttons = []

    for data, button in langs.items():
        buttons.append(InlineKeyboardButton(text=button, callback_data=data))
    builder.row(*buttons, width=2)

    return builder.as_markup()


async def check_subscription(chat_id, channel_id):
    member = await bot.get_chat_member(chat_id=channel_id, user_id=chat_id)
    if member.status == "member":
        return True

async def admin_or_creator(chat_id, channel_id):
    user = await bot.get_chat_member(chat_id=channel_id, user_id=chat_id)
    if user.status == "administrator" or user.status == "creator":
        return True

# –Ω—É–∂–Ω—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
# –∫–æ–ª–ª–±—ç–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@dp.callback_query()
async def callback_but(callback: CallbackQuery):
    CHAT_ID = callback.message.chat.id
    id_channel = "-1001932021320"

    is_admin = await admin_or_creator(CHAT_ID, id_channel)
    is_sub = await check_subscription(CHAT_ID, id_channel)

    if is_admin or is_sub:
        if callback.data == "langs":
            await callback.message.edit_text(text=callback.message.text, reply_markup=buitd_keydoard())
            await callback.answer()

        else:
            for data, button in langs.items():
                if callback.data == data:
                    try:
                        await callback.message.edit_text(text=translate_text(text=callback.message.text, src=detected_text(callback.message.text), dest=data), reply_markup=buitd_keydoard())
                        await callback.answer()
                    except:
                        await callback.answer()
    else:
        if users[callback.message.chat.id]['attemps'] == 0:
            await callback.message.answer(text="–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É", reply_markup=markup_sub)

        else:
            users[callback.message.chat.id]['attemps'] = users[callback.message.chat.id]['attemps'] - 1
            if callback.data == "langs":
                await callback.message.edit_text(text=callback.message.text, reply_markup=buitd_keydoard())
                await callback.answer()

            else:
                for data, button in langs.items():
                    if callback.data == data:
                        try:
                            await callback.message.edit_text(text=translate_text(text=callback.message.text, src=detected_text(callback.message.text), dest=data), reply_markup=buitd_keydoard())
                            await callback.answer()
                        except:
                            await callback.answer()


    if callback.data == 'sub':
        is_sub = await check_subscription(CHAT_ID, id_channel)
        if is_sub:
            await callback.message.answer("–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!")
        else:
            await callback.message.answer("–ù–µ –≤–∏–∂—É —Ç–≤–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–∏...", reply_markup=markup_sub)


if __name__ == '__main__':
    dp.run_polling(bot)